diff --git ece454750a2/src/ece454750s15a2/TriangleCountImpl.java ece454750a2/src/ece454750s15a2/TriangleCountImpl.java
index 57bacf8..3443c8f 100644
--- ece454750a2/src/ece454750s15a2/TriangleCountImpl.java
+++ ece454750a2/src/ece454750s15a2/TriangleCountImpl.java
@@ -37,13 +37,13 @@ public class TriangleCountImpl {
     public class AdjMatrixGraph {
         private int V;
         private int E;
-        private int[][] adjMatrix;
+        private ArrayList<ArrayList<Integer>> adjMatrix;
 
         public AdjMatrixGraph(int V) {
             if (V < 0) throw new RuntimeException("Number of vertices cannot be negative.");
             this.V = V;
             this.E = 0;
-            this.adjMatrix = new int[V][V];
+            this.adjMatrix = new ArrayList<ArrayList<Integer>>();
         }
 
         private class AdjIterator implements Iterator<Integer>, Iterable<Integer> {
@@ -54,7 +54,7 @@ public class TriangleCountImpl {
 
             public boolean hasNext() {
                 while (w < V) {
-                    if (adjMatrix[v][w] == 1)
+                    if (adjMatrix.get(v).get(w) == 1)
                         return true;
                     w++;
                 }
@@ -78,15 +78,19 @@ public class TriangleCountImpl {
             return this.E;
         }
 
-        public void addEdge(int x, int y) {
-            if(this.adjMatrix[x][y] == 0) // Only increment if new edge.
-                this.E++;
-            this.adjMatrix[x][y] = 1;
-            this.adjMatrix[y][x] = 1;
+        public void addEdge(int x, ArrayList<Integer> connections) {
+            /*
+               if(this.adjMatrix.size() > 0) {
+                   if(this.adjMatrix.get(x).get(y) == null) // Only increment if new edge.
+                   this.E++;
+            }
+            */
+
+            this.adjMatrix.add(x, connections);
         }
 
         public int contains(int x, int y) {
-            return this.adjMatrix[x][y];
+            return this.adjMatrix.get(x).get(y);
         }
 
         public Iterable<Integer> adjMatrix(int v) {
@@ -363,7 +367,7 @@ public class TriangleCountImpl {
             return C;
         }
 
-        public static int[][] strassen(ArrayList<ArrayList<Integer>> A,
+        public static ArrayList<ArrayList<Integer>> strassen(ArrayList<ArrayList<Integer>> A,
                                        ArrayList<ArrayList<Integer>> B) {
             // Make the matrices bigger so that you can apply the strassen
             // algorithm recursively without having to deal with odd
@@ -380,10 +384,10 @@ public class TriangleCountImpl {
             }
 
             int[][] CPrep = strassenR(APrep, BPrep);
-            int[][] C = new int[n][n];
+            ArrayList<ArrayList<Integer>> C = new ArrayList<ArrayList<Integer>>();
             for (int i = 0; i < n; i++) {
                 for (int j = 0; j < n; j++) {
-                    C[i][j] = CPrep[i][j];
+                    C.get(i).set(j, CPrep[i][j]);
                 }
             }
             return C;
@@ -485,11 +489,11 @@ public class TriangleCountImpl {
         }
     }
 
-    public boolean checkForTriangle(int[][] A, int[][] A_sq) {
-        int n = A.length;
+    public boolean checkForTriangle(ArrayList<ArrayList<Integer>> A, ArrayList<ArrayList<Integer>> A_sq) {
+        int n = A.size();
         for(int i = 0; i < n; ++i) {
             for(int j = 0; j < n; ++j) {
-                if(A[i][j] == 1 && A_sq[i][j] >= 1) {
+                if(A.get(i).get(j) == 1 && A_sq.get(i).get(j) >= 1) {
                     return true;
                 }
             }
@@ -544,10 +548,11 @@ public class TriangleCountImpl {
         */
 
         Strassen strassenator = new Strassen();
-        int[][] stage1 = adjacencyMatrix.adjMatrix;
-        int[][] stage2 = strassenator.strassen(stage1, stage1);
+        ArrayList<ArrayList<Integer>> stage1 = adjacencyMatrix.adjMatrix;
         //System.out.println(adjacencyMatrix);
         //System.out.println("Stage1\n" + Arrays.deepToString(stage1));
+
+        ArrayList<ArrayList<Integer>> stage2 = strassenator.strassen(stage1, stage1);
         //System.out.println("Stage2\n" + Arrays.deepToString(stage2));
 
         boolean triangleFound = checkForTriangle(stage1, stage2);
@@ -581,9 +586,15 @@ public class TriangleCountImpl {
             int current_vertex = Integer.parseInt(parts[0]);
             if (parts.length > 1) { // we haz edges!
                 parts = parts[1].split(" +");
-                for(String edge : parts) {
-                    adjMatrix.addEdge(current_vertex, Integer.parseInt(edge));
+                ArrayList<Integer> connections = new ArrayList<Integer>();
+
+                // Manually build collection.
+                for(int i = 0; i < parts.length; i++) {
+                    Integer partInt = Integer.parseInt(parts[i]);
+                    connections.add(partInt);
                 }
+
+                adjMatrix.addEdge(current_vertex, connections);
             }
         }
         br.close();
